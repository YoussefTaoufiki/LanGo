# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using react-native-draggable-flatlist, the types are included in the package itself, no need for @types/react-native-draggable-flatlist
- When using react-native-paper's theme, use onPrimary instead of white for text color on primary background
- Use ThunkDispatch<RootState, undefined, AnyAction> for proper typing of Redux dispatch with thunks
- When installing @react-native-firebase/analytics and @react-native-community/netinfo in an Expo project, use npm install with --legacy-peer-deps flag to resolve version conflicts, and ensure @types/react-native is installed as a dev dependency

# Scratchpad

# Current Task: Language Selection and Library Implementation

## Overview
Implementing a comprehensive onboarding and library system that starts with language selection and presents a beautifully designed book library interface. The system will integrate with Firebase for book storage and management, organized by language and proficiency levels.

## Implementation Plan

### 1. Language Selection Dialog
[X] Create LanguageSelectionDialog component
  - Modern, welcoming design
  - Language options with flags/icons
  - Proficiency level selection (A1-C2)
  - Persist selection in user preferences
  - Integration with Firebase user profile

### 2. Firebase Integration
[X] Set up Firebase Storage structure
  - Books organized by language
  - Subdirectories for proficiency levels
  - Metadata storage for book information
  - Caching strategy for better performance
[X] Create Firebase service for book management
  - Book retrieval by language/level
  - Progress tracking
  - Recently read books
  - User preferences storage

### 3. Library UI Components
[X] Create LibraryView component
  - White plate design for book displays
  - Subtle shadows and elevation
  - Responsive grid layout
  - Animation for hover/selection
[X] Implement LastReadBook component
  - Prominent placement at top
  - Larger size than other books
  - Progress indicator
  - Quick resume button

### 4. Book Display Components
[X] Create BookCard component
  - Cover image display
  - Title and author
  - Progress indicator
  - Level badge
  - Hover effects
[X] Implement BookGrid component
  - Responsive grid layout
  - Filtering by level
  - Sorting options
  - Lazy loading

### 5. Navigation and Routing
[ ] Set up protected routes
[ ] Implement navigation flow
  - Initial language selection
  - Library view
  - Book detail view
  - Reading interface

### 6. User Experience Features
[X] Add loading states
[X] Implement error handling
[X] Add empty state designs
[ ] Create onboarding tooltips
[X] Add search functionality

### 7. Visual Design Elements
[X] Design system setup
  - Color palette
  - Typography
  - Spacing system
  - Shadow levels
[X] Animation system
  - Page transitions
  - Card hover effects
  - Loading animations
  - Micro-interactions

## Technical Specifications

### Firebase Structure
```
/books
  /{language}
    /{level}
      /{bookId}
        - title
        - author
        - coverUrl
        - description
        - totalChapters
        - difficulty
        - metadata
```

### Component Hierarchy
```
App
├── LanguageSelectionDialog
├── LibraryView
│   ├── LastReadBook
│   ├── BookGrid
│   │   └── BookCard
│   └── FilterControls
└── BookDetailView
```

### State Management
- User preferences in Redux
- Book data cached in Redux
- Reading progress synced with Firebase
- Language selection persisted

### Design Guidelines
- White background for book plates
- Subtle shadows (box-shadow: 0 2px 4px rgba(0,0,0,0.1))
- Card elevation on hover
- Smooth transitions (300ms ease-in-out)
- Responsive breakpoints for different screen sizes

Progress:
- [X] Created all main UI components (LibraryView, LastReadBook, BookGrid, BookCard)
- [X] Implemented Firebase integration for book management
- [X] Added search and filtering functionality
- [X] Implemented responsive design and animations
- [X] Set up theme system with light/dark mode support
- [ ] Need to fix TypeScript/linter errors
- [ ] Need to implement protected routes and navigation
- [ ] Need to add onboarding tooltips
- [ ] Need to implement book detail view and reading interface

Next Steps:
1. Fix TypeScript/linter errors by:
   - Installing proper @types/mui__material and @types/mui__icons-material
   - Adding proper theme typing for styled components
   - Adding proper Firebase type declarations
2. Implement protected routes and navigation
3. Add onboarding tooltips
4. Create book detail view and reading interface





