# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using react-native-draggable-flatlist, the types are included in the package itself, no need for @types/react-native-draggable-flatlist
- When using react-native-paper's theme, use onPrimary instead of white for text color on primary background
- Use ThunkDispatch<RootState, undefined, AnyAction> for proper typing of Redux dispatch with thunks
- When installing @react-native-firebase/analytics and @react-native-community/netinfo in an Expo project, use npm install with --legacy-peer-deps flag to resolve version conflicts, and ensure @types/react-native is installed as a dev dependency

# Scratchpad

## Current Task: Resolving Missing Dependencies

### Overview
Need to add missing dependencies for Firebase, Google Cloud services, React Native components, and Material-UI related packages.

### Dependencies Analysis

#### 1. Firebase Related Dependencies
[X] Already have @react-native-firebase/app and auth
[X] Added:
  - @react-native-firebase/analytics
  - @react-native-firebase/firestore
  - @react-native-firebase/storage
  - firebase/firestore (via firebase core)
  - firebase/auth (via firebase core)

#### 2. Google Cloud Services
[X] Added:
  - @google-cloud/text-to-speech
  - @google-cloud/storage

#### 3. React Native Components
[X] Already have react-native-vector-icons
[X] Already have react-native-fs
[X] Already have react-native-zip-archive
[X] Added:
  - react-native-sound
  - expo-auth-session/providers/google (via expo-auth-session)
  - expo-random (note: deprecated, but required for now)

#### 4. Material UI
[X] Already have @mui/material
[X] @mui/material/styles is included in @mui/material

### Implementation Plan

1. Firebase Dependencies
   [X] Install Firebase core modules
   ```bash
   npm install @react-native-firebase/analytics @react-native-firebase/firestore @react-native-firebase/storage
   ```

2. Google Cloud Services
   [X] Install Google Cloud packages
   ```bash
   npm install @google-cloud/text-to-speech @google-cloud/storage
   ```

3. React Native Components
   [X] Install additional React Native packages
   ```bash
   npm install react-native-sound
   ```

4. Expo Auth Session
   [X] Configure Google provider
   ```bash
   npm install expo-auth-session expo-random
   ```

### Progress Tracking

#### Completed
- [X] Initial package.json analysis
- [X] Dependency categorization
- [X] Implementation plan creation
- [X] Installing Firebase dependencies
- [X] Installing Google Cloud dependencies
- [X] Installing React Native dependencies
- [X] Installing Expo dependencies

#### In Progress
- [ ] Test Firebase connections
- [ ] Test Google Cloud services
- [ ] Update tsconfig.json types if needed

#### To Do
- [ ] Test authentication flow
- [ ] Test file operations
- [ ] Configure Google Cloud credentials
- [ ] Set up OAuth for authentication

### Notes
1. Some dependencies might require additional configuration:
   - Google Cloud services will need credentials
   - Firebase will need proper initialization
   - Expo auth session will need OAuth client configuration

2. Version Compatibility:
   - All packages should be compatible with Expo SDK 52
   - React Native version 0.73.6
   - React version 18.2.0
   - Firebase version 21.8.0 (all packages)

3. Post-Installation Steps:
   - Update Firebase initialization
   - Configure Google Cloud credentials
   - Set up OAuth for authentication
   - Test each service individually

### Next Steps
1. [ ] Test Firebase initialization and connections
2. [ ] Set up Google Cloud credentials
3. [ ] Configure OAuth for authentication
4. [ ] Test all services
5. [ ] Update documentation

### Final Verification Checklist
- [X] All dependencies installed
- [X] No version conflicts
- [ ] TypeScript types properly configured
- [ ] Firebase properly initialized
- [ ] Google Cloud credentials configured
- [ ] Authentication flow tested
- [ ] File operations verified

### Known Issues
1. expo-random is deprecated, but still required. Consider migrating to expo-crypto in the future.
2. Some moderate severity vulnerabilities reported by npm audit - may need investigation.
3. Need to set up proper environment variables for Firebase and Google Cloud credentials.





